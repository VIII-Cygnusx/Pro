/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <gui/compass_screen/COMPASSView.hpp>
#include <gui/compass_screen/COMPASSPresenter.hpp>
#include <gui/timer_screen/TIMERView.hpp>
#include <gui/timer_screen/TIMERPresenter.hpp>
#include <gui/imu_screen/IMUView.hpp>
#include <gui/imu_screen/IMUPresenter.hpp>
#include <gui/locat_screen/LOCATView.hpp>
#include <gui/locat_screen/LOCATPresenter.hpp>
#include <gui/system_screen/SYSTEMView.hpp>
#include <gui/system_screen/SYSTEMPresenter.hpp>
#include <gui/cam_screen/CAMView.hpp>
#include <gui/cam_screen/CAMPresenter.hpp>
#include <gui/cam_setting_screen/CAM_settingView.hpp>
#include <gui/cam_setting_screen/CAM_settingPresenter.hpp>
#include <gui/sport_screen/SPORTView.hpp>
#include <gui/sport_screen/SPORTPresenter.hpp>
#include <gui/sport_setting_screen/SPORT_SETTINGView.hpp>
#include <gui/sport_setting_screen/SPORT_SETTINGPresenter.hpp>
#include <gui/health_screen/HEALTHView.hpp>
#include <gui/health_screen/HEALTHPresenter.hpp>
#include <gui/env_screen/ENVView.hpp>
#include <gui/env_screen/ENVPresenter.hpp>
#include <gui/game_screen/GAMEView.hpp>
#include <gui/game_screen/GAMEPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
}

/*
 * Screen Transition Declarations
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// COMPASS

void FrontendApplicationBase::gotoCOMPASSScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCOMPASSScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCOMPASSScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<COMPASSView, COMPASSPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// TIMER

void FrontendApplicationBase::gotoTIMERScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoTIMERScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoTIMERScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<TIMERView, TIMERPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// IMU

void FrontendApplicationBase::gotoIMUScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoIMUScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoIMUScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<IMUView, IMUPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// LOCAT

void FrontendApplicationBase::gotoLOCATScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoLOCATScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLOCATScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<LOCATView, LOCATPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SYSTEM

void FrontendApplicationBase::gotoSYSTEMScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSYSTEMScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSYSTEMScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<SYSTEMView, SYSTEMPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// CAM

void FrontendApplicationBase::gotoCAMScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCAMScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCAMScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<CAMView, CAMPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

void FrontendApplicationBase::gotoCAMScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCAMScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCAMScreenNoTransitionImpl()
{
    touchgfx::makeTransition<CAMView, CAMPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// CAM_setting

void FrontendApplicationBase::gotoCAM_settingScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCAM_settingScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCAM_settingScreenNoTransitionImpl()
{
    touchgfx::makeTransition<CAM_settingView, CAM_settingPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SPORT

void FrontendApplicationBase::gotoSPORTScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSPORTScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSPORTScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<SPORTView, SPORTPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

void FrontendApplicationBase::gotoSPORTScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSPORTScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSPORTScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SPORTView, SPORTPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SPORT_SETTING

void FrontendApplicationBase::gotoSPORT_SETTINGScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSPORT_SETTINGScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSPORT_SETTINGScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SPORT_SETTINGView, SPORT_SETTINGPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// HEALTH

void FrontendApplicationBase::gotoHEALTHScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoHEALTHScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoHEALTHScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<HEALTHView, HEALTHPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ENV

void FrontendApplicationBase::gotoENVScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoENVScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoENVScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<ENVView, ENVPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// GAME

void FrontendApplicationBase::gotoGAMEScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoGAMEScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoGAMEScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<GAMEView, GAMEPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
