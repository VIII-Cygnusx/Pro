/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TIMERVIEWBASE_HPP
#define TIMERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/timer_screen/TIMERPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/CLOCK_INNER.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class TIMERViewBase : public touchgfx::View<TIMERPresenter>
{
public:
    TIMERViewBase();
    virtual ~TIMERViewBase();
    virtual void setupScreen();

    virtual void MINUpdateItem(CLOCK_INNER& item, int16_t itemIndex)
    {
        // Override and implement this function in TIMER
    }

    virtual void HOURUpdateItem(CLOCK_INNER& item, int16_t itemIndex)
    {
        // Override and implement this function in TIMER
    }

    /*
     * Virtual Action Handlers
     */
    virtual void HU_()
    {
        // Override and implement this function in TIMER
    }
    virtual void HD_()
    {
        // Override and implement this function in TIMER
    }
    virtual void MU_()
    {
        // Override and implement this function in TIMER
    }
    virtual void MD_()
    {
        // Override and implement this function in TIMER
    }
    virtual void SU_()
    {
        // Override and implement this function in TIMER
    }
    virtual void SD_()
    {
        // Override and implement this function in TIMER
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Line line;
    touchgfx::PainterRGB565 linePainter;
    touchgfx::Button quit;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::TextAreaWithOneWildcard week_txt;
    touchgfx::Image image1;
    touchgfx::ToggleButton start;
    touchgfx::ScrollWheel MIN;
    touchgfx::DrawableListItems<CLOCK_INNER, 3> MINListItems;
    touchgfx::ScrollWheel HOUR;
    touchgfx::DrawableListItems<CLOCK_INNER, 3> HOURListItems;
    touchgfx::TextArea POINT;

    /*
     * Wildcard Buffers
     */
    static const uint16_t WEEK_TXT_SIZE = 5;
    touchgfx::Unicode::UnicodeChar week_txtBuffer[WEEK_TXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TIMERViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    touchgfx::Callback<TIMERViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // TIMERVIEWBASE_HPP
